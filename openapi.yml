---
openapi: 3.0.1
info:
  title: Koleg
  description: Koleg project API
  termsOfService: "nothing"
  contact:
    email: aurelien.satger@etu.u-bordeaux.fr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: https://gitlab.com/koleg1/api/-/blob/develop/swagger/swagger.yml
servers:
  - url: http://localhost:8080/v1
    description: Local development server
  - url: https://api.koleg.nofreedisk.space/v1
    description: Development server
  - url: https://api.staging.koleg.com/v1
    description: Staging server
  - url: https://api.koleg.com/v1
    description: Production server

tags:
  - name: Authentication
    description: Everything about authentication.
  - name: Groups
    description: Everything abouts groups.
  - name: Jobs
    description: Everything abouts jobs.
  - name: Users
    description: Everything about users.

paths:
  /auth/login:
    get:
      tags:
        - Authentication
      summary: Logs user into the system with jwt
      operationId: login
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
            format: password
      responses:
        200:
          description: Success.
          headers:
            X-Rate-Limit:
              description: Calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: Date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  loggedUser:
                    $ref: "#/components/schemas/UserRead"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /auth/logout:
    get:
      tags:
        - Authentication
      summary: Logs out current logged in user session
      operationId: logout
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /auth/reset_password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password.
      operationId: resetPassword
      requestBody:
        description: User email.
        content:
          "application/json":
            schema:
              type: string
              format: email
        required: true
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
      x-codegen-request-body-name: email

  ##################
  ###### GROUPS ####
  ##################

  /groups:
    get:
      tags:
        - Groups
      summary: Get groups
      security:
        - BearerAuth: []
      description: Get all groups.
      operationId: getGroups
      parameters:
        - name: name
          in: query
          description: Groupe name to research
          schema:
            type: string
        - name: items_number
          in: query
          description: Specify items number to fetch.
          schema:
            $ref: "#/components/schemas/QueryLimit"
        - name: page
          in: query
          description: Specify wich page to query
          schema:
            $ref: "#/components/schemas/QueryPage"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags:
        - Groups
      summary: Add group
      security:
        - BearerAuth: []
      description: Add group.
      operationId: addGroup
      requestBody:
        description: Created group object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /groups/{id}:
    get:
      tags:
        - Groups
      summary: Get a group
      security:
        - BearerAuth: []
      description: Get a group details by group id.
      operationId: getGroup
      parameters:
        - name: id
          in: path
          description: The group id that need to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  group:
                    $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - Groups
      summary: Update group
      security:
        - BearerAuth: []
      description: Update group details by group id.
      operationId: updateGroup
      parameters:
        - name: id
          in: path
          description: The group id that need to be updated.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  updatedGroup:
                    $ref: "#/components/schemas/Group"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags:
        - Groups
      summary: Delete group
      security:
        - BearerAuth: []
      description: Delete group by group id.
      operationId: deleteGroup
      parameters:
        - name: id
          in: path
          description: The group id that need to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /groups/{id}/upload_image:
    post:
      tags:
        - Groups
      summary: Upload group image
      security:
        - BearerAuth: []
      description: Upload group image.
      operationId: uploadGroupImage
      parameters:
        - name: id
          in: path
          description: The group id that need to be updated.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/Image"
        required: true
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /groups/{id}/rights:
    get:
      tags:
        - Groups
      summary: Get group rights
      operationId: gegGroupRights
      security:
        - BearerAuth: []
      description: Get group rights.
      parameters:
        - name: id
          in: path
          description: The group id that need to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  rights:
                    type: array
                    items:
                      $ref: "#/components/schemas/Right"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - Groups
      summary: Update group rights
      security:
        - BearerAuth: []
      description: Update group rights
      operationId: updateGroupRights
      parameters:
        - name: id
          in: path
          description: Group id that need to be updated.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated rights array object.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Right"
        required: true
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  rights:
                    type: array
                    items:
                      $ref: "#/components/schemas/Right"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
      x-codegen-request-body-name: body

  ##################
  ###### JOBS ######
  ##################

  /jobs:
    get:
      tags:
        - Jobs
      summary: Get jobs
      security:
        - BearerAuth: []
      description: Get all jobs.
      operationId: getJobs
      parameters:
        - name: items_number
          in: query
          description: Specify items number to fetch.
          schema:
            multipleOf: 10.0
            maximum: 100
            minimum: 20
            type: integer
            default: 20
        - name: page
          in: query
          description: Specify wich page to query
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            default: 0
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Job"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags:
        - Jobs
      summary: Add job
      security:
        - BearerAuth: []
      description: Add job.
      operationId: addJob
      requestBody:
        description: Created job object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
        required: true
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
      x-codegen-request-body-name: job
  /jobs/{id}:
    get:
      tags:
        - Jobs
      summary: Get a job
      security:
        - BearerAuth: []
      description: Get a job details by job id.
      operationId: getJob
      parameters:
        - name: id
          in: path
          description: The job id that need to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  job:
                    $ref: "#/components/schemas/Job"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - Jobs
      summary: Update job
      security:
        - BearerAuth: []
      description: Update jo  details by job id.
      operationId: updateJob
      parameters:
        - name: id
          in: path
          description: The job id that need to be updated.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  updatedJob:
                    $ref: "#/components/schemas/Job"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags:
        - Jobs
      summary: Delete job
      security:
        - BearerAuth: []
      description: Delete job by job id.
      operationId: deleteJob
      parameters:
        - name: id
          in: path
          description: The job id that need to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"

  ##################
  ###### USERS #####
  ##################

  /users:
    get:
      tags:
        - Users
      summary: Get users
      security:
        - BearerAuth: []
      description: Get all or search users.
      operationId: getUsers
      parameters:
        - name: first_name
          in: query
          description: Users name to search.
          schema:
            type: string
        - name: last_name
          in: query
          description: Users name to search.
          schema:
            type: string
        - name: phone
          in: query
          description: Search user by phone number.
          schema:
            type: string
            # https://regex101.com/r/64YEwu/3
            pattern: ^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$
        - name: show_disabled
          in: query
          description: Show disabled users. Only admins parameter.
          schema:
            type: boolean
        - name: items_number
          in: query
          description: Specify items number to fetch.
          schema:
            $ref: "#/components/schemas/QueryLimit"
        - name: page
          in: query
          description: Specify wich page to query
          schema:
            $ref: "#/components/schemas/QueryPage"
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  users:
                    type: array
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/UserBase"
                        - $ref: "#/components/schemas/UserRead"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags:
        - Users
      summary: Add user
      security:
        - BearerAuth: []
      description: Add user.
      operationId: addUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWrite"
        required: true
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
      x-codegen-request-body-name: body
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by user id
      security:
        - BearerAuth: []
      description: Get user details by user id.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/UserRead"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - Users
      summary: Update user
      security:
        - BearerAuth: []
      description: Update user by user id.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User id that need to be updated.
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated user object.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWrite"
        required: true
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  updatedUser:
                    $ref: "#/components/schemas/UserRead"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
      x-codegen-request-body-name: body
    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - BearerAuth: []
      description: Delete user by user id.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The user id that needs to be deleted.
          required: true
          schema:
            type: integer
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /users/{id}/vcard:
    get:
      tags:
        - Users
      summary: Get user vCard
      security:
        - BearerAuth: []
      description: Get user vCard by user id.
      operationId: getUserVCardById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  vcardUrl:
                    type: string
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /users/{id}/upload_image:
    post:
      tags:
        - Users
      summary: Upload user image
      security:
        - BearerAuth: []
      description: Upload user image.
      operationId: uploadUserImage
      parameters:
        - name: id
          in: path
          description: The user id that need to be updated.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/Image"
        required: true
      responses:
        200:
          $ref: "#/components/responses/Success"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
  /users/{id}/rights:
    get:
      tags:
        - Users
      summary: Get user rights
      operationId: getUserRights
      security:
        - BearerAuth: []
      description: Get user rights.
      parameters:
        - name: id
          in: path
          description: The user id that need to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  rights:
                    type: array
                    items:
                      $ref: "#/components/schemas/Right"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - Users
      summary: Update user rights
      security:
        - BearerAuth: []
      description: Update user rights
      operationId: updateUserRights
      parameters:
        - name: id
          in: path
          description: User id that need to be updated.
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated rights array object.
        content:
          "application/json":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Right"
        required: true
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                type: object
                properties:
                  updatedRights:
                    type: array
                    items:
                      $ref: "#/components/schemas/Right"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/Internal"
        default:
          $ref: "#/components/responses/Default"
      x-codegen-request-body-name: body

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    BadRequest:
      description: Bad request. User ID must be an integer and larger than 0.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    Unauthorized:
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    NotFound:
      description: Parameters not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    Internal:
      description: Unexpected internal error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    Default:
      description: An unknown error occured

  schemas:
    Group:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        img_url:
          type: string
        groups:
          $ref: "#/components/schemas/Group"
    UserBase:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        password_datelimit:
          type: string
          format: date-time
          nullable: true
        birthdate:
          type: string
          format: date-time
        email:
          type: string
          format: email
        img_url:
          type: string
        ssh_key:
          type: string
          nullable: true
        job:
          $ref: "#/components/schemas/Job"
        expiration_date:
          type: string
          format: date-time
          nullable: true
        removal_date:
          type: string
          format: date-time
          nullable: true
        phones:
          type: array
          items:
            $ref: "#/components/schemas/Phone"
            nullable: true
    # User object used for creation
    UserWrite:
      allOf:
        - $ref: "#/components/schemas/UserBase"
      type: object
      properties:
        passwordHash:
          type: string
          format: password
          nullable: true
    # User object used for reading
    UserRead:
      allOf:
        - $ref: "#/components/schemas/UserBase"
      type: object
      properties:
        id:
          type: string
          format: uuid
        creation_date:
          type: string
          format: date-time
        update_date:
          type: string
          format: date-time
        expiration_date:
          type: string
          format: date-time
        phones:
          type: array
          items:
            $ref: "#/components/schemas/Phone"
    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Phone:
      type: object
      properties:
        id:
          type: string
          format: uuid
        value:
          type: string
          pattern: ^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$
        phoneType:
          $ref: "#/components/schemas/PhoneType"
    PhoneType:
      type: string
      enum:
        - PHONE_HOME
        - PHONE_WORK
        - PHONE_CELL_HOME
        - PHONE_CELL_WORK
    RightAction:
      type: string
      enum:
        - ALL
        - CREATE
        - UPDATE
        - DELETE
        - READ
        - READ_RIGHTS
        - WRITE_RIGHTS
    Right:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
        resource:
          type: string
        action:
          $ref: "#/components/schemas/RightAction"
        attributes:
          type: array
          items:
            type: string
    Image:
      type: string
      format: binary
    RequestStatus:
      type: string
      enum:
        - OK
        - KO
    # Search query request parameters
    QueryPage:
      maximum: 1000
      minimum: 0
      type: integer
      default: 0
    QueryLimit:
      type: integer
      minimum: 1
      multipleOf: 10.0
      maximum: 100
      default: 20

    # Request response
    ApiResponse:
      type: object
      required:
        - code
        - status
        - message
      properties:
        code:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
        status:
          $ref: "#/components/schemas/RequestStatus"
        message:
          type: string