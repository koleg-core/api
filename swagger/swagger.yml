---
openapi: 3.0.1
info:
  title: Koleg
  description: Koleg project API
  termsOfService: "nothing"
  contact:
    email: aurelien.satger@etu.u-bordeaux.fr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/v1
    description: Local development server
  - url: https://api.koleg.nofreedisk.space/v1
    description: Development server
  - url: https://api.staging.koleg.com/v1
    description: Staging server
  - url: https://api.koleg.com/v1
    description: Production server

tags:
  - name: Authentication
    description: Everything about authentication.
  - name: Groups
    description: Everything abouts groups.
  - name: Jobs
    description: Everything abouts jobs.
  - name: Users
    description: Everything about users.

##### TODO #####
# - utiliser APIResponse pour les retours de requête
# - gérer la pagination
################

paths:
  /auth/login:
    get:
      tags:
        - Authentication
      summary: Logs user into the system with jwt
      operationId: login
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
            format: password
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content: {}
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /auth/logout:
    get:
      tags:
        - Authentication
      summary: Logs out current logged in user session
      operationId: logout
      responses:
        default:
          description: successful operation
          content: {}
  /auth/reset_password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password.
      operationId: resetPassword
      requestBody:
        description: User email.
        content:
          "*/*":
            schema:
              type: string
              format: email
        required: true
      responses:
        200:
          description: Email sent to user email adresse.
          content: {}
        400:
          description: Invalid password.
          content: {}
        404:
          description: User not found with this id.
          content: {}
      x-codegen-request-body-name: email

  ##################
  ###### GROUPS ####
  ##################

  /groups:
    get:
      tags:
        - Groups
      summary: Get groups
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get all groups.
      operationId: getGroups
      parameters:
        - name: items_number
          in: query
          description: Specify items number to fetch.
          schema:
            multipleOf: 10.0
            maximum: 100
            minimum: 20
            type: integer
            default: 20
      responses:
        200:
          description: Groups successfully fetched.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
        404:
          description: No groups found.
          content: {}
        default:
          description: An error occured.
          content: {}
    post:
      tags:
        - Groups
      summary: Add group
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Add group.
      operationId: addGroup
      requestBody:
        description: Created group object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        200:
          description: Group successfully created.
          content: {}
        400:
          description: Invalid group object.
          content: {}
        default:
          description: An error occured.
          content: {}
      x-codegen-request-body-name: group
  /groups/{id}:
    get:
      tags:
        - Groups
      summary: Get a group
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get a group details by group id.
      operationId: getGroup
      parameters:
        - name: id
          in: path
          description: The group id that need to be fetched.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Group successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          description: Invalid group id.
          content: {}
        404:
          description: No group found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
    put:
      tags:
        - Groups
      summary: Update group
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Update group details by group id.
      operationId: updateGroup
      parameters:
        - name: id
          in: path
          description: The group id that need to be updated.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Group successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        400:
          description: Invalid group object.
          content: {}
        404:
          description: No group found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
    delete:
      tags:
        - Groups
      summary: Delete group
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Delete group by group id.
      operationId: deleteGroup
      parameters:
        - name: id
          in: path
          description: The group id that need to be deleted.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Group successfully deleted.
          content: {}
        400:
          description: Invalid group id.
          content: {}
        404:
          description: No group found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
  /groups/{id}/upload_image:
    post:
      tags:
        - Groups
      summary: Upload group image
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Upload group image.
      operationId: uploadGroupImage
      parameters:
        - name: id
          in: path
          description: The group id that need to be updated.
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              properties:
                file:
                  type: string
                  description: The uploaded file.
                  format: binary
                  x-mimetype: image/*
        required: true
      responses:
        200:
          description: Group image successfully uploaded.
          content: {}
        400:
          description: Invalid image.
          content: {}
        404:
          description: Group not found with this id.
          content: {}
  /groups/{id}/rights:
    get:
      tags:
        - Groups
      summary: Get group rights
      operationId: gegGroupRights
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get group rights.
      parameters:
        - name: id
          in: path
          description: The group id that need to be fetched.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Group rights successfully fetched.
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Right"
        400:
          description: Invalid group id.
          content: {}
        404:
          description: No rights found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
    put:
      tags:
        - Groups
      summary: Update group rights
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Update group rights
      operationId: updateGroupRights
      parameters:
        - name: id
          in: path
          description: Group id that need to be updated.
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated rights array object.
        content:
          "*/*":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Right"
        required: true
      responses:
        200:
          description: Group rights successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Right"
        400:
          description: Invalid group rights object.
          content: {}
        404:
          description: No group found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
      x-codegen-request-body-name: body

  ##################
  ###### JOBS ######
  ##################

  /jobs:
    get:
      tags:
        - Jobs
      summary: Get jobs
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get all jobs.
      operationId: getJobs
      parameters:
        - name: items_number
          in: query
          description: Specify items number to fetch.
          schema:
            multipleOf: 10.0
            maximum: 100
            minimum: 20
            type: integer
            default: 20
      responses:
        200:
          description: Jobs successfully fetched.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Job"
        404:
          description: No jobs found.
          content: {}
        default:
          description: An error occured.
          content: {}
    post:
      tags:
        - Jobs
      summary: Add job
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Add job.
      operationId: addJob
      requestBody:
        description: Created job object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Job"
        required: true
      responses:
        200:
          description: Job successfully created.
          content: {}
        400:
          description: Invalid job object.
          content: {}
        default:
          description: An error occured.
          content: {}
      x-codegen-request-body-name: job
  /jobs/{id}:
    get:
      tags:
        - Jobs
      summary: Get a job
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get a job details by job id.
      operationId: getJob
      parameters:
        - name: id
          in: path
          description: The job id that need to be fetched.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Job successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        400:
          description: Invalid job id.
          content: {}
        404:
          description: No job found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
    put:
      tags:
        - Jobs
      summary: Update job
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Update jo  details by job id.
      operationId: updateJob
      parameters:
        - name: id
          in: path
          description: The job id that need to be updated.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Job successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        400:
          description: Invalid job object.
          content: {}
        404:
          description: No job found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
    delete:
      tags:
        - Jobs
      summary: Delete job
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Delete job by job id.
      operationId: deleteJob
      parameters:
        - name: id
          in: path
          description: The job id that need to be deleted.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Job successfully deleted.
          content: {}
        400:
          description: Invalid job id.
          content: {}
        404:
          description: No job found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}

  ##################
  ###### USERS #####
  ##################

  /users:
    get:
      tags:
        - Users
      summary: Get users
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get all users.
      operationId: getUsers
      parameters:
        - name: items_number
          in: query
          description: Specify items number to fetch.
          schema:
            multipleOf: 10.0
            maximum: 100
            minimum: 20
            type: integer
            default: 20
      responses:
        200:
          description: Users successfully fetched.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        404:
          description: No users found.
          content: {}
        default:
          description: An error occured.
          content: {}
    post:
      tags:
        - Users
      summary: Add user
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Add user.
      operationId: addUser
      requestBody:
        description: Created user object
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: User successfully created.
          content: {}
        400:
          description: Invalid user object.
          content: {}
        default:
          description: An error occured.
          content: {}
      x-codegen-request-body-name: body
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by user id
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get user details by user id.
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User successfully fetched.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid user id.
          content: {}
        404:
          description: No user found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
    put:
      tags:
        - Users
      summary: Update user
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Update user by user id.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User id that need to be updated.
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated user object.
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: User successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid user object.
          content: {}
        404:
          description: No user found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Delete user by user id.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The user id that needs to be deleted.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User successfully deleted.
          content: {}
        400:
          description: Invalid user id.
          content: {}
        404:
          description: No user found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
  /users/{id}/vcard:
    get:
      tags:
        - Users
      summary: Get user vCard
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get user vCard by user id.
      operationId: getUserVCardById
      parameters:
        - name: id
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        200:
          description: User vCard successfully fetched.
          content:
            application/json:
              schema:
                type: string
                format: binary
        400:
          description: Invalid user id supplied.
          content: {}
        404:
          description: User not found with this id.
          content: {}
  /users/{id}/upload_image:
    post:
      tags:
        - Users
      summary: Upload user image
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Upload user image.
      operationId: uploadUserImage
      parameters:
        - name: id
          in: path
          description: The user id that need to be updated.
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              properties:
                file:
                  type: string
                  description: The uploaded file.
                  format: binary
                  x-mimetype: image/*
        required: true
      responses:
        200:
          description: User image successfully uploaded.
          content: {}
        400:
          description: Invalid image.
          content: {}
        404:
          description: User not found with this id.
          content: {}
  /users/{id}/rights:
    get:
      tags:
        - Users
      summary: Get user rights
      operationId: getUserRights
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Get user rights.
      parameters:
        - name: id
          in: path
          description: The user id that need to be fetched.
          required: true
          schema:
            type: string
      responses:
        200:
          description: User rights successfully fetched.
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Right"
        400:
          description: Invalid user id.
          content: {}
        404:
          description: No rights found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
    put:
      tags:
        - Users
      summary: Update user rights
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Update user rights
      operationId: updateUserRights
      parameters:
        - name: id
          in: path
          description: User id that need to be updated.
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated rights array object.
        content:
          "*/*":
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Right"
        required: true
      responses:
        200:
          description: User rights successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Right"
        400:
          description: Invalid user rights object.
          content: {}
        404:
          description: No user found with this id.
          content: {}
        default:
          description: An error occured.
          content: {}
      x-codegen-request-body-name: body
  /users/search:
    get:
      tags:
        - Users
      summary: Search users by query
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
      description: Search users by query
      operationId: searchUsers
      parameters:
        - name: query
          in: query
          description: The search query that needs to be fetched.
          required: true
          schema:
            type: string
        - name: filters
          in: query
          description: The search filters to apply to query.
          required: true
          schema:
            type: string
        - name: items_number
          in: query
          description: Specify items number to fetch.
          schema:
            multipleOf: 10.0
            maximum: 100
            minimum: 20
            type: integer
            default: 20
      responses:
        200:
          description: Users successfully fetched.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Invalid query parameters.
          content: {}
        404:
          description: No users found.
          content: {}

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

  schemas:
    Group:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        img_url:
          type: string
        groups:
          $ref: "#/components/schemas/Group"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        uuid:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        password:
          type: string
          format: password
        password_datelimit:
          type: string
          format: date-time
        birthdate:
          type: string
          format: date-time
        email:
          type: string
          format: email
        img_url:
          type: string
        ssh_key:
          type: string
        job:
          $ref: "#/components/schemas/Job"
        creation_date:
          type: string
          format: date-time
        update_date:
          type: string
          format: date-time
        expiration_date:
          type: string
          format: date-time
        phones:
          type: array
          items:
            $ref: "#/components/schemas/Phone"
    Job:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    Phone:
      type: object
      properties:
        id:
          type: integer
        value:
          type: string
          format: phone
        phoneType:
          $ref: "#/components/schemas/PhoneType"
    PhoneType:
      type: string
      enum:
        - PHONE_HOME
        - PHONE_WORK
        - PHONE_CELL_HOME
        - PHONE_CELL_WORK
    RightAction:
      type: string
      enum:
        - ALL
        - CREATE
        - UPDATE
        - DELETE
        - READ
        - READ_RIGHTS
        - WRITE_RIGHTS
    Right:
      type: object
      properties:
        id:
          type: integer
        role:
          type: string
        resource:
          type: string
        action:
          $ref: "#/components/schemas/RightAction"
        attributes:
          type: array
          items:
            type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
